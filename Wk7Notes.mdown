##DAY 1
###Morning exercise
Prime Agenda (4/13)
- no computers 
- go through sheet of printed code and explain each step of the way 
- each team member should be able to articulate each part 

Read, write, speak

HTML review: 
meta (in <head>): make website more searchable, declare charset 

script tag 
link tag in head 
--> similar but different? 

script tag: put at the bottom of the page so it doesn't prevent access to body 

look  up data types re: arrays

Javascript will parse string numbers into numbers when COMPARING (==) but nothing else. "Type Coersion"

There is a "gotcha" - an assignment in a conditional will always evaluate as true

|| "Double Pipe" */

```JavaScript
if(!scottsNumber) {
	scottsNumber = "Hi there"; 
}
```

Review hoisting notes? 
console.log();

_Is using 'return' without something to return a viable way to terminate a function within a conditional, or does that need to be done with an if else?_ <-- yes, it is correct and needed to do this sometimes. 

##DAY 2 4/14
###LECTURE ONE
Arrays are a list of information stored in a variable. 

```JavaScript
var scottsArray = [6,7,8]
var scottsArray[9]
```

push, pop - pop things off back of the array, push to back of the array
shift, unshift - front of the array, must shift index


NaN - error when system is given something NaN to treat as a number (math operation)
undefined - not a variable that has been defined (initialized only) <--- ????? true? 

**Using a stylesheet - reminder**
```html
<link href = "filename/hi.css" rel="stylesheet">
		<link href = "stylesheet.css" rel="stylesheet">
```
href in this case used instead of src b/c of "industry standard"

```JavaScript
console.log[] = //a Statement 
```

can establish var i outside of for loops to save memory

Infinite loop example (script414.js) - wait, how would we solve this? 

###functions 
```JavaScript
function areaOne(width,height) {
	return width * height;
	}

var areaTwo = function(width,height) {
	return width * height;
};
```

both anonymous functions and other functions are called the same thing. 
```JavaScript
areaOne(x,y);
areaTwo(x,y);
```

what is the mysterious callbacK? 

```JavaScript
variable.toString();
variable.parseInt();
variable.charAt(2); 
```

###LECTURE TWO, DAY TWO 4/14
sourcetree - visual representation of git
gt init

Working zone
Add to staging 
Commit to index
Push to server

-In Class Example
--.git 
--index.html
--stylesheet.css
--app.js

##DAY 3
###morning lecture
- lecture
- toastmasters 
- big group project (business problem)
- daily challenge - debugging

MVC - not all development is so nicely organized. 
Nerdery developed a MVC format 
- advantages: forces you to think about where your code is and what it's doing 
- separation of concerns 

CSS/HTML/etc
- use ids for more interactive elements, class for less interactive 

DOM is a programming interface (API) for html and well-formed xml documents. It provides a structured representation of the document (a tree) and it defines a way that the structure can be accessed from programs so that they can change the document structure, style and content.

HTML 4-14.html 
```JavaScript
document.getElementById("sweetID")
var x = ...
```
"a function of the Element class in Javascript"

CSS reminder: 
```css
p {
	color: #ff94b3	
}
}
```

switch case 
```JavaScript
var x = 1; 

function inputFired(event) {
	switch(event.keyCode) {
		case "up": //if (x) = "cat"
			movePlayerUp();
			break;
		case "down": //like "mouse"
			movePlayerDown();
			break;
		case "spacebar": //liek "arrow"
			moovePlayerJump();
			break;
		}

}
```
comma rather than concatenation will preserve data type (console.log output, etc.)

##DAY 4
###morning lecture 
JS 4-16.js
###Afternoon lecture
```unix
git fetch + git merge = git pull
git clone <url> //clone

git branch -r  //display all branches
git branch //display current 

git checkout -b Joe //create branch (-b) Joe
```

##DAY 5

Learned markup for inserting code! 
 ```html
<html lang="en">
...
</html>
```
###afternoon lecture
####Objects
```JavaScript
var Scott = {
	name : "Scott Bromander",//typically the place to start, but not necessarily
	//name is a reserved keyword in JS8
	employeeNumber : 24856,//this is a property, or key -- key-value pair
	salary : 100000, 
	debt : 500000
	availableIncome = function () { //function expression
		return this.salary - this.debt //'this' is special 
	}
}
console.log("Scott's rating: " + scott.rating); //key/property : value
```
future: instantiation ??

```JavaScript
function availableIncome(obj) {
	Return obj.availableIncome - obj.debt;
}

//This is an example of constructor notation
var sorry = new Object();

//dynamic property access
scott.name = "Scott Bromander"; //big potential for problems with creating new typo keys

scott.availableIncome = function() {
	return this.salary - this.debt;
}; 

console.log(scott.availableIncome());
```
```JavaScript
function Person(name, employeeNumber, salary, debt) {
	this.name = name; 
	this.employeeNumber = employeeNumber;
	this.salary = salary;
	this.availableIncome = function() {
		return this.salary - this.debt;
	};
}

var person1 = new Person("Bob", 010301, 30000, 12000);
var person2 = new Person("Sue", 392412, 14324, 23414);
```






