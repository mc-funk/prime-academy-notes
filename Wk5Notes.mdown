Object.prototype.isPrototypeOf(shoe); = boolean ( = true)

Looks all the way upward through the prototype chain to seee whether the Object.prototype Object is a prototypical "ancestor" of (item)

var tree = {age: underined. location: undefined, type: undefined}
var elm = Object.create(tree);

Determine properties of class = set of Objects that share and inherit from the same basic prototype. 

A constructor is built with all properties of the entire class

**Capitalizing the variable in JS distinguishes it as a maker of an entire class of objects. 

function Shoe (shoeSize, shoeColor, forGender, constructStyle) {
	this.size = shoeSize;
	this.color = shoeColor; 
	this.gender = forGender;
	this.construction = constructStyle;
	this.putOn = function () {alert("Shoe's on!")};

}

**var beachShoe = new Shoe(10, "blue", "women", "flipflop");
**beachShoe.putOn();

... This time, with inheritance! 

set a constructor's protoype property: 
Shoe.prototype = {
	feed: function () {alert("Thank you!";)},
	water: function () {alert("Yay water!");}
}

beachShoe.hasOwnProperty("construction");

--
Accessing 

Tornado.prototype.toString = function() {
	//desired "toString" functionality.
	//This seems like it would only really be useful in 
	//situations where a function or other part of the code 
	//called "toString" for multiple objects, and we wanted to 
	//ensure the desired behavior.
}

Finding constructor & prototype: 

twiter.constructor;
//returns entire text of constructor function (cool!)

twitter.constructor.prototype;
//return Object {valueOf: function, toString: function}
//Not sure what this is returning?? 
//"Remember that if a prototype Object is defined for a specific class, it will always be a property of the class's constrution, which is just another function Object."
//can also use twitster.__proto__;

Object.prototype.findOwnerOfProperty = function ( propName ) {
	var currentObject = this;
	while (currentObject != null) {
		if (currentObject.hasOwnProperty(propName)) {
			return currentObject;
		} else {
			currentObject = currentObject.__proto__;
			}			
	}
	return "No property found!";
}

Javascript Kit
http://www.smashingmagazine.com/2009/02/08/50-extremely-useful-javascript-tools/
scripterlative.com