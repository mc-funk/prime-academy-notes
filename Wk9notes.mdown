##Week Three, Day One
###morning lecture 

Overengineering vs. making good/simple code 

```html
<div class="teamSizeButton" id="button2" data-teamsize="2">2</div>; 
``
```CSS
.teamSizeButton, .refresh button { /*no comma would look for latter inside of former*/
	background-color: #000000;
}
```
```javascript
$(".teamSizeButton").on("click", function() {
	groupSize = $(this).data("teamsize"); //this has to be lowercase when you call it
});
```
How to know what to put in the document.ready, or not? 
//TODO: these are sometimes picked up by where you're writing your code!

Making lines of jQuery cleaner: 
```javascript
var targetParent = $('#group' + count);
var el = "<p>" + teamList[i] + "</p>";

targetParent.append(el);
el = targetParent.children().last();
```

###late morning lecture
CSS Cross Country - light and fluffy

Display type for div default = inline 
```CSS
div {
	display: block;
	float: left;
	margin: 0 20px 0 10px; /*Margin collapsing: space between these will be 20px*/
}
```
Use comma delimited styling to group things that should be consistend. 
```CSS
div, p {
	/*Styling</*
}
```
Cascade order -- top down: defining an element attribute at the same specificity level means the one lower on the page will override the previous one. (Selector specificity will be important here)

Pseudo-classes (selectors?): 
```CSS
div:hover { /*Does this have a relationship with js .hover()?*/
	background-color: #00FF00;
}
div:active {
	background-color: #0000FF;
}
```
Complex selectors
```css
#parentDiv div { /*divs within id parentDiv*/
	width: 100px;
	height: 100px;
}

#parentDiv div:nth-child(even) {
	background-color: #FF0000;
}

#parentDiv div:nth-child(odd) {
	background-color: #00FF00;
}
```
(An+B) - 2n+0 = even; 2n+1 = odd;
Every nth child (where n = A) + starting child (=B)

Exercise: for every other li in <ul><li>Thing 1</li>...</ul>;
```css
ul li:nth-child(even) { /*Or li:nth-child(2n+1)*/
	background-color: #333333;
}
```

####Bootstrap
Effective at spinning up good-looking sites quickly 
Uses a column system - divides page into 12 columns
```javascript
<div class=""></div>
```
Bootstrap: pre-programmed files, functionality
[demos/Bootstrap4-27.html](demos/Bootstrap4-27.html)
[demos/Bootstrap4-27.css](demos/Bootstrap4-27.css)
[demos/Bootstrap4-27.css](demos/Bootstrap4-27.css)

```css
<div class="col-md-4"> /*Special bootstrap class - span 4 columns*/
```

Columns past 13 will wrap to nearest spot to the top regardless of column

Offset: add in a second class to any element
```css
<div class="row"> /*New horizontal grouping of info*/
	<div class="col-md-3 col-md-offset-1"> /*Special bootstrap class - span 4 columns*/
	/*All the stuffs*/
	</div>
</div>
```

##WEEK THREE DAY TWO
###morning tech lecture
placekitten.com/320/210 <-- gives you a kitten of that size!!
fillmurray.com similar
placeholder.it

Adobe Kuler
[color.adobe.com](color.adobe.com)
[color.adobe.com/explore](color.adobe.com/explore)

col-xs-1 0px phone
col-sm-2 768px tablet
col-md-3 992px laptop
col-lg-4 1200px desktop

hidden-sm, etc - only impacts specified size

text-left
text-right
text-justify
text-center
text-nowrap

btn-lg
btn-sm
btn-xs

btn-default
btn-primary
btn-success
btn-info
btn-warning
btn-danger

css for resizing: 
```css
.cat-title img {
	width: 150px;
}
```

###Afternoon lecture
[http://bootswatch.com](http://bootswatch.com)
Bootstrap exercise possibilities: 
* add bootstrap theme to Tues solo assignment
* add bootstrap theme to fruit assignment

##DAY FOUR
REST is a standard way we talk to servers.
- connection between server and client.
- node.js: traditionally servers are different developers than client side. Trend towards full-stack.

Common actions:
- Get: retrieves information from a server
- post: creates resources
- put: modify existing file
- delete: qed

For now: articficially creating communication lines with servers

AJAX : asynchronous javascript and xml;
- JSON
- asynchronous: not waiting for something to do what we are doing. Non-sequential
- AJAX: you have to send the request first. Initial request, request comes back
- Grab additional information: traditionally, nav to another page
	* AJAX allows us to make micro-requests to the website.
- Can use AJAX to load information not previously loaded into the page
	* Twitter gives a live update of incoming tweets without refreshing page
- Request and response - each has a standard anatomy based on REST standardization. These are also very frequent vocab when dealing with node.
	* Request:
	* Response:
- jQuery makes it easier for us to use AJAX, but AJAX is not a jQuery function.
- .ajax:.get :: .on:.click
